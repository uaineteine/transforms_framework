{
  "log_info": {
    "input_tables": [
      "positions"
    ],
    "output_tables": [
      "positions"
    ],
    "input_variables": [
      [
        "age",
        "name"
      ]
    ],
    "output_variables": [
      "concatenated_id"
    ],
    "created_variables": [
      "concatenated_id"
    ],
    "renamed_variables": null,
    "removed_variables": null,
    "input_row_counts": null,
    "output_row_counts": null,
    "input_columns": {
      "positions": [
        "age",
        "name",
        "var",
        "position",
        "skill"
      ]
    },
    "output_columns": {
      "positions": [
        "age",
        "name",
        "var",
        "position",
        "skill",
        "concatenated_id"
      ]
    },
    "num_input_frames": 1,
    "num_output_frames": 1
  },
  "uuid": "24ad620a-abc3-4000-9c05-87b338935e29",
  "timestamp": "2025-09-15T14:32:45.429274+00:00",
  "executed_user": "runner",
  "macro_uuid": "9f2cd191-2599-4292-8af1-d45ade54838f",
  "event_type": "transform",
  "event_description": "Concatenante multiple columns together in a dataframe",
  "meta_version": "1.0",
  "name": "ConcatColumns",
  "transform_type": "TableTransform",
  "testable_transform": true,
  "version_pyspark": "4.0.1",
  "version_polars": "1.33.1",
  "version_pandas": "2.3.2",
  "version_python": "3.12.3",
  "params": {
    "df": "positions",
    "output_var": "concatenated_id"
  },
  "transform_id": "ConcCols",
  "target_tables": [
    "positions"
  ],
  "target_variables": [
    "age",
    "name"
  ],
  "separator": "_",
  "class_type": "ConcatColumns"
}
{
  "macro_uuid": "9f2cd191-2599-4292-8af1-d45ade54838f",
  "log_info": null,
  "uuid": "eb076b7e-fed3-4960-bb7c-1311c4d62f0f",
  "timestamp": "2025-09-15T14:32:45.429531+00:00",
  "executed_user": "runner",
  "event_type": "transform",
  "event_description": "Concatenates two ID columns with underscore separator",
  "meta_version": "1.0",
  "name": "ConcatenateIDs",
  "transform_type": "ConcatIDs",
  "testable_transform": true,
  "version_pyspark": "4.0.1",
  "version_polars": "1.33.1",
  "version_pandas": "2.3.2",
  "version_python": "3.12.3",
  "params": {
    "df": "positions",
    "output_var": "concatenated_id"
  },
  "transform_list": [
    {
      "log_info": {
        "input_tables": [
          "positions"
        ],
        "output_tables": [
          "positions"
        ],
        "input_variables": [
          [
            "age",
            "name"
          ]
        ],
        "output_variables": [
          "concatenated_id"
        ],
        "created_variables": [
          "concatenated_id"
        ],
        "renamed_variables": null,
        "removed_variables": null,
        "input_row_counts": null,
        "output_row_counts": null,
        "input_columns": {
          "positions": [
            "age",
            "name",
            "var",
            "position",
            "skill"
          ]
        },
        "output_columns": {
          "positions": [
            "age",
            "name",
            "var",
            "position",
            "skill",
            "concatenated_id"
          ]
        },
        "num_input_frames": 1,
        "num_output_frames": 1
      },
      "persistent_uuid": false,
      "uuid": "24ad620a-abc3-4000-9c05-87b338935e29",
      "timestamp": "2025-09-15T14:32:45.429274+00:00",
      "executed_user": "runner",
      "macro_uuid": "9f2cd191-2599-4292-8af1-d45ade54838f",
      "log_exclusions": [
        "log_location",
        "indent_depth",
        "log_exclusions",
        "persistent_uuid"
      ],
      "log_location": "events_log/job_1/transforms.json",
      "indent_depth": 2,
      "event_type": "transform",
      "event_description": "Concatenante multiple columns together in a dataframe",
      "meta_version": "1.0",
      "name": "ConcatColumns",
      "transform_type": "TableTransform",
      "testable_transform": true,
      "version_pyspark": "4.0.1",
      "version_polars": "1.33.1",
      "version_pandas": "2.3.2",
      "version_python": "3.12.3",
      "params": {
        "df": "positions",
        "output_var": "concatenated_id"
      },
      "transform_id": "ConcCols",
      "target_tables": [
        "positions"
      ],
      "target_variables": [
        "age",
        "name"
      ],
      "separator": "_"
    }
  ],
  "class_type": "MacroTransform"
}
{
  "log_info": {
    "input_tables": [
      "positions"
    ],
    "output_tables": [
      "positions"
    ],
    "input_variables": [
      "synthetic_aeuid"
    ],
    "output_variables": [
      "synthetic_aeuid"
    ],
    "created_variables": null,
    "renamed_variables": null,
    "removed_variables": null,
    "input_row_counts": {
      "positions": 5
    },
    "output_row_counts": {
      "positions": 1
    },
    "input_columns": null,
    "output_columns": null,
    "num_input_frames": 1,
    "num_output_frames": 1
  },
  "uuid": "2714c020-b358-4dfe-be5d-0b1e6cc4b360",
  "timestamp": "2025-09-15T14:32:46.122160+00:00",
  "executed_user": "runner",
  "macro_uuid": "6e343555-b90f-4b04-aa63-21a028f8681d",
  "event_type": "transform",
  "event_description": "Drops rows with NA values in column 'synthetic_aeuid'",
  "meta_version": "1.0",
  "name": "DropNAValues",
  "transform_type": "TableTransform",
  "testable_transform": true,
  "version_pyspark": "4.0.1",
  "version_polars": "1.33.1",
  "version_pandas": "2.3.2",
  "version_python": "3.12.3",
  "params": {
    "df": "positions"
  },
  "transform_id": "DropNA",
  "target_tables": [
    "positions"
  ],
  "target_variables": [
    "synthetic_aeuid"
  ],
  "column": "synthetic_aeuid",
  "class_type": "DropNAValues"
}
{
  "macro_uuid": "6e343555-b90f-4b04-aa63-21a028f8681d",
  "log_info": null,
  "uuid": "a94ffaed-b1d3-48d4-a2c1-06e495110253",
  "timestamp": "2025-09-15T14:32:46.122267+00:00",
  "executed_user": "runner",
  "event_type": "transform",
  "event_description": "Drops missing IDs by removing rows with NA values in synthetic_aeuid",
  "meta_version": "1.0",
  "name": "DropMissingIDs",
  "transform_type": "DropMissing",
  "testable_transform": true,
  "version_pyspark": "4.0.1",
  "version_polars": "1.33.1",
  "version_pandas": "2.3.2",
  "version_python": "3.12.3",
  "params": {
    "df": "positions"
  },
  "transform_list": [
    {
      "log_info": {
        "input_tables": [
          "positions"
        ],
        "output_tables": [
          "positions"
        ],
        "input_variables": [
          "synthetic_aeuid"
        ],
        "output_variables": [
          "synthetic_aeuid"
        ],
        "created_variables": null,
        "renamed_variables": null,
        "removed_variables": null,
        "input_row_counts": {
          "positions": 5
        },
        "output_row_counts": {
          "positions": 1
        },
        "input_columns": null,
        "output_columns": null,
        "num_input_frames": 1,
        "num_output_frames": 1
      },
      "persistent_uuid": false,
      "uuid": "2714c020-b358-4dfe-be5d-0b1e6cc4b360",
      "timestamp": "2025-09-15T14:32:46.122160+00:00",
      "executed_user": "runner",
      "macro_uuid": "6e343555-b90f-4b04-aa63-21a028f8681d",
      "log_exclusions": [
        "log_location",
        "indent_depth",
        "log_exclusions",
        "persistent_uuid"
      ],
      "log_location": "events_log/job_1/transforms.json",
      "indent_depth": 2,
      "event_type": "transform",
      "event_description": "Drops rows with NA values in column 'synthetic_aeuid'",
      "meta_version": "1.0",
      "name": "DropNAValues",
      "transform_type": "TableTransform",
      "testable_transform": true,
      "version_pyspark": "4.0.1",
      "version_polars": "1.33.1",
      "version_pandas": "2.3.2",
      "version_python": "3.12.3",
      "params": {
        "df": "positions"
      },
      "transform_id": "DropNA",
      "target_tables": [
        "positions"
      ],
      "target_variables": [
        "synthetic_aeuid"
      ],
      "column": "synthetic_aeuid"
    }
  ],
  "class_type": "MacroTransform"
}
{"log_info": {"input_tables": ["positions"], "output_tables": ["positions_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "bee6a2ca-1728-49bc-8f68-514489a5ff89", "timestamp": "2025-09-15T14:32:47.366355+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table positions to ../test_tables/output/positions.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/positions.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
{"log_info": {"input_tables": ["salary"], "output_tables": ["salary_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "86b95c41-3eab-463d-aea5-64ecc055a610", "timestamp": "2025-09-15T14:32:47.531436+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table salary to ../test_tables/output/salary.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/salary.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
{"log_info": {"input_tables": ["location"], "output_tables": ["location_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "32ab1f7a-39bb-4be8-9013-e1aeec069350", "timestamp": "2025-09-15T14:32:47.661701+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table location to ../test_tables/output/location.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/location.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
{"log_info": {"input_tables": ["array_like"], "output_tables": ["array_like_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "0392928a-f6c6-4b75-b451-e33bcaa33a81", "timestamp": "2025-09-15T14:32:47.768134+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table array_like to ../test_tables/output/array_like.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/array_like.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
{"log_info": {"input_tables": ["decimal_table"], "output_tables": ["decimal_table_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "505e1936-b675-4019-abe2-9fac931fe245", "timestamp": "2025-09-15T14:32:47.935621+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table decimal_table to ../test_tables/output/decimal_table.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/decimal_table.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
{"log_info": {"input_tables": ["date_table"], "output_tables": ["date_table_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "9a8b3896-6b2a-4343-8354-f2f808509373", "timestamp": "2025-09-15T14:32:48.079014+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table date_table to ../test_tables/output/date_table.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/date_table.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
{"log_info": {"input_tables": ["state"], "output_tables": ["state_written"], "input_variables": [], "output_variables": [], "created_variables": null, "renamed_variables": null, "removed_variables": null, "num_input_frames": 1, "num_output_frames": 1}, "uuid": "dbe91c72-ab4c-4e63-a818-06dacec8881a", "timestamp": "2025-09-15T14:32:48.197313+00:00", "executed_user": "runner", "macro_uuid": null, "event_type": "write", "event_description": "Wrote table state to ../test_tables/output/state.parquet as parquet", "meta_version": "1.0", "name": "Write", "testable_transform": false, "filepath": "../test_tables/output/state.parquet", "out_format": "parquet", "class_type": "PipelineEvent"}
